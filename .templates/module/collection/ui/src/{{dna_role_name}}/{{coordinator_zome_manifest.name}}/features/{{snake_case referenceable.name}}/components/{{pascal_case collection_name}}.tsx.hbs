import React, { useState, useContext, useRef, useEffect } from 'react';
import { Record, ActionHashB64, encodeHashToBase64, AgentPubKeyB64 } from '@holochain/client';
import { ClientContext } from '../../../../../clientContext';

import { SlAlert, SlIcon, SlSpinner } from '@shoelace-style/shoelace/dist/react';

import {{pascal_case referenceable.name}}Details from './{{pascal_case referenceable.name}}Detail';
import { {{pascal_case referenceable.name}}{{#each entry_type.fields}}{{#if (eq field_type.type "Enum")}}, {{field_type.label}}{{/if}}{{/each}} } from '../types';
import { {{pascal_case referenceable.name}}sSignal } from '../../../types';

{{#if (eq collection_type.type "ByAuthor")}}
interface IAll{{pascal_case referenceable.name}}sProps {
  author: AgentPubKeyB64;
}
{{/if}}

const All{{pascal_case referenceable.name}}s = ({{#if (eq collection_type.type "ByAuthor")}} { author } : IAll{{pascal_case referenceable.name}}sProps{{/if}}) => {
  const client = useContext(ClientContext);
  const [loading, setLoading] = useState(true);
  const [hashes, setHashes] = useState<Array<ActionHashB64>>();

  const fetchErrorRef = useRef<any>(null);

  useEffect(() => {
    fetch{{pascal_case referenceable.name}}s();
    client!.on('signal', (signal : any) => {
      if (signal.zome_name !== '{{snake_case referenceable.name}}s') return; 
      const payload = signal.payload as {{pascal_case referenceable.name}}sSignal;
      if (payload.type !== 'EntryCreated') return;
      if (payload.app_entry.type !== '{{pascal_case referenceable.name}}') return;
{{#if (eq collection_type.type "ByAuthor")}}
      if (author.toString() !== client!.myPubKey.toString()) return;
{{/if}}
      if (hashes) setHashes([...hashes, (payload as any).action.hashed.hash]);
    });
  } ,[])

  const fetch{{pascal_case referenceable.name}}s = async () => {
    setLoading(true);

    try {
      const maybeRecords: Array<Record> = await client!.callZome({
        cap_secret: null,
        role_name: '{{dna_role_name}}',
        zome_name: '{{coordinator_zome_manifest.name}}',
        fn_name: 'get_all_{{snake_case referenceable.name}}s',
        payload: {{#if (eq collection_type.type "ByAuthor")}}author{{else}}null{{/if}}
      });

      setHashes(maybeRecords.map(r => encodeHashToBase64(r.signed_action.hashed.hash) as ActionHashB64));
    } catch (e: any) {
      fetchErrorRef?.current.toast();
    }
    setLoading(false);
  };

  return loading ? <SlSpinner></SlSpinner> :
    !hashes || hashes && hashes.length == 0 ? <p>No records found</p> : (
    <>
      <SlAlert variant="warning" ref={fetchErrorRef}>
        <SlIcon slot="icon" name="exclamation-triangle" />
        <strong>Oh dear!</strong>
        <br />
          There was an error fetching your records. No record was found{{#if (eq collection_type.type "ByAuthor")}} for this author{{/if}}.
      </SlAlert>
      {
        hashes.map((ah: ActionHashB64, i: number) => 
          <{{pascal_case referenceable.name}}Details {{snake_case referenceable.name}}Hash={ah} on{{pascal_case referenceable.name}}Deleted={fetch{{pascal_case referenceable.name}}s} key={i} />
        )
      }
    </>
  );
};

export default All{{pascal_case referenceable.name}}s;