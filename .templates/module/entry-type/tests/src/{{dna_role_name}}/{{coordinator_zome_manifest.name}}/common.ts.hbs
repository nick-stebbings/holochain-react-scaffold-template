{{previous_file_content}}

export async function sample{{pascal_case entry_type.name}}(cell: CallableCell, partial{{pascal_case entry_type.name}} = {}) {
    return {
        ...{
{{#each entry_type.fields}}
  {{#if linked_from}}
    {{#if (ne linked_from.hash_type "AgentPubKey")}}
      {{#if (eq cardinality "vector")}}
        {{#if (eq (pascal_case linked_from.name) (pascal_case ../entry_type.name))}}
          {{field_name}}: [],
        {{else}}
          {{#if (eq linked_from.hash_type "ActionHash")}}
          {{field_name}}: [(await create{{pascal_case linked_from.name}}(cell)).signed_action.hashed.hash],
          {{else}}
          {{field_name}}: [((await create{{pascal_case linked_from.name}}(cell)).signed_action.hashed.content as NewEntryAction).entry_hash],
          {{/if}}
        {{/if}}
      {{else}}
        {{#if (eq (pascal_case linked_from.name) (pascal_case ../entry_type.name))}}
          {{field_name}}: null,
        {{else}}
	  {{#if (eq linked_from.hash_type "ActionHash")}}
          {{field_name}}: (await create{{pascal_case linked_from.name}}(cell)).signed_action.hashed.hash,
          {{else}}
          {{field_name}}: ((await create{{pascal_case linked_from.name}}(cell)).signed_action.hashed.content as NewEntryAction).entry_hash,
          {{/if}}
        {{/if}}
      {{/if}}
    {{else}}
          {{field_name}}: cell.cell_id[1],
    {{/if}}
  {{else}}
      {{#if (eq cardinality "vector")}}
	  {{field_name}}: [{{> (concat field_type.type "/sample") field_type=field_type}}],
      {{else}}
	  {{field_name}}: {{> (concat field_type.type "/sample") field_type=field_type}},
      {{/if}}
  {{/if}}
{{/each}}
        },
        ...partial{{pascal_case entry_type.name}}
    };
}

export async function create{{pascal_case entry_type.name}}(cell: CallableCell, {{camel_case entry_type.name}} = undefined): Promise<Record> {
    return cell.callZome({
      zome_name: "{{coordinator_zome_manifest.name}}",
      fn_name: "create_{{snake_case entry_type.name}}",
      payload: {{camel_case entry_type.name}} || await sample{{pascal_case entry_type.name}}(cell),
    });
}

