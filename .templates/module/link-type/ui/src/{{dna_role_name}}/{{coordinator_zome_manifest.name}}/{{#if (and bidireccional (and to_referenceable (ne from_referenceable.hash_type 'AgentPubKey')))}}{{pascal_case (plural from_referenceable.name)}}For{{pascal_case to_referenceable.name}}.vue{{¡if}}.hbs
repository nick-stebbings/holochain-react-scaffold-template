<template>
  <div v-if="loading" style="display: flex; flex: 1; align-items: center; justify-content: center">
    <mwc-circular-progress indeterminate></mwc-circular-progress>
  </div>
  
  <div v-else style="display: flex; flex-direction: column">
    <span v-if="error">Error fetching the {{lower_case (plural from_referenceable.name)}}: {{{{raw}}}} {{error.data.data}}.{{{{/raw}}}}</span>
    <div v-else-if="hashes && hashes.length > 0" style="margin-bottom: 8px">
      <{{pascal_case from_referenceable.name}}Detail 
        v-for="hash in hashes" 
        :{{kebab_case from_referenceable.name}}-hash="hash" 
      ></{{pascal_case from_referenceable.name}}Detail>
    </div>
    <span v-else>No {{lower_case (plural from_referenceable.name)}} found for this {{lower_case to_referenceable.name}}.</span>
  </div>

</template>

<script lang="ts">
import { defineComponent, toRaw, inject, ComputedRef } from 'vue';
import { decode } from '@msgpack/msgpack';
import { AppAgentClient, Record, AgentPubKey, EntryHash, ActionHash, NewEntryAction } from '@holochain/client';
import '@material/mwc-circular-progress';
import {{pascal_case from_referenceable.name}}Detail from './{{pascal_case from_referenceable.name}}Detail.vue';
import { {{pascal_case coordinator_zome_manifest.name}}Signal } from './types';

export default defineComponent({
  components: {
    {{pascal_case from_referenceable.name}}Detail
  },
  props: {
    {{camel_case to_referenceable.singular_arg}}: {
      type: Object,
      required: true
    }
  },
  data(): { hashes: Array<{{from_referenceable.hash_type}}> | undefined; loading: boolean; error: any } {
    return {
      hashes: undefined,
      loading: true,
      error: undefined
    }
  },
  async mounted() {
    if (this.{{camel_case to_referenceable.singular_arg}} === undefined) {
      throw new Error(`The {{camel_case to_referenceable.singular_arg}} input is required for the {{pascal_case (plural from_referenceable.name)}}For{{pascal_case to_referenceable.name}} element`);
    }

    try {
      const records: Array<Record> = await this.client.callZome({
        cap_secret: null,
        role_name: '{{dna_role_name}}',
        zome_name: '{{coordinator_zome_manifest.name}}',
        fn_name: 'get_{{snake_case (plural from_referenceable.name)}}_for_{{snake_case to_referenceable.name}}',
        payload: this.{{camel_case to_referenceable.singular_arg}},
      });
      this.hashes = records.map(r => {{#if (eq from_referenceable.hash_type "ActionHash")}}r.signed_action.hashed.hash{{else}}(r.signed_action.hashed.content as NewEntryAction).entry_hash{{/if}});
    } catch (e) {
      this.error = e;
    }
    this.loading = false;
    
    toRaw(this.client).on('signal', signal => {
      if (signal.zome_name !== '{{coordinator_zome_manifest.name}}') return; 
      const payload = signal.payload as {{pascal_case coordinator_zome_manifest.name}}Signal;
      if (payload.type !== 'LinkCreated') return;
      if (payload.link_type !== '{{pascal_case bidireccional}}') return;

      if (this.hashes) this.hashes.push(payload.action.hashed.content.target_address);
    });
  },
  setup() {
    const client = (inject('client') as ComputedRef<AppAgentClient>).value;
    return {
      client,
    };
  },
})
</script>
