import React, { useState, useContext, useRef } from 'react';
import { Record, EntryHash, ActionHash } from '@holochain/client';
import { ClientContext } from '../../../../../clientContext';

import type SlInputElement from '@shoelace-style/shoelace/dist/components/input/input';
import { SlAlert, SlButton, SlIcon } from '@shoelace-style/shoelace/dist/react';
{{#uniq_lines}}
  {{#each entry_type.fields}}
    {{#if widget}}
{{> (concat field_type.type "/" widget "/edit/imports") }};
    {{/if}}
  {{/each}}
{{/uniq_lines}}

import { {{pascal_case entry_type.name}}{{#each entry_type.fields}}{{#if (eq field_type.type "Enum")}}, {{field_type.label}}{{/if}}{{/each}} } from '../types';

interface ICreate{{pascal_case entry_type.name}}Props {
  onCreateCanceled?: () => void;
  on{{pascal_case entry_type.name}}Created?: (actionHash: ActionHash) => void;
}

const Create{{pascal_case entry_type.name}} = ({onCreateCanceled, on{{pascal_case entry_type.name}}Created} : ICreate{{pascal_case entry_type.name}}Props) => {
  const client = useContext(ClientContext);

  const formRef = useRef<HTMLFormElement>(null);
  const createSuccessRef = useRef<typeof SlAlert>(undefined);
  const createErrorRef = useRef<typeof SlAlert>(undefined);
  const current{{pascal_case entry_type.name}}: {{pascal_case entry_type.name}} = { {{#each entry_type.fields}}
          {{#if (eq cardinality "single") }}
          {{snake_case field_name}}:{{#if widget}}{{> (concat field_type.type "/" widget "/initial-value") }}{{/if}},
          {{else}}
          {{snake_case field_name}}: this.{{camel_case field_name}}{{#if (eq cardinality "vector") }} as Array<{{> (concat field_type.type "/type") }}>{{/if}},
          {{/if}}
    {{/each}}

  const [{{snake_case entry_type.name}}, set{{pascal_case entry_type.name}}] = useState<{{pascal_case entry_type.name}}>(current{{pascal_case entry_type.name}});

  const is{{pascal_case entry_type.name}}Valid = () => {
      return true{{#each entry_type.fields}}{{#if widget}}{{#if (eq cardinality "single")}} && {{> (concat field_type.type "/" widget "/is-valid") variable_to_validate=(concat "{{snake_case entry_type.name}}." (camel_case field_name)) }}{{/if}}{{#if (eq cardinality "vector")}} && {{snake_case entry_type.name}}.{{camel_case field_name}}.every(e => {{> (concat field_type.type "/" widget "/is-valid") variable_to_validate="e" }}){{/if}}{{/if}}{{/each}};
    };

  const create{{pascal_case entry_type.name}} = async () => {
    try {
      const createRecord: Record = await client!.callZome({
        cap_secret: null,
        role_name: '{{dna_role_name}}',
        zome_name: '{{coordinator_zome_manifest.name}}',
        fn_name: 'create_{{snake_case entry_type.name}}',
        payload: {{camel_case entry_type.name}}
      });
      !!on{{pascal_case entry_type.name}}Created && on{{pascal_case entry_type.name}}Created!(createRecord.signed_action.hashed.hash);
    } catch (e: any) {
      createErrorRef!.current.show();
      createErrorRef!.current.toast();
    }
  };

  const handleChange = async (event: any) => {
    const value = (event.target as SlInputElement).value;

    set{{pascal_case entry_type.name}}({
      ...{{snake_case entry_type.name}},
      [event.target.name]: value
    });
  }

  const handleSubmit = async (e: any) => {
    e.preventDefault();

    await createTodo();
  }

  return (
    <>
      <SlAlert variant="success" ref={createSuccessRef}>
        <SlIcon slot="icon" name="check2-circle" />
        <strong>Your new record has been saved</strong>
        <br />
        You can safely return now.
      </SlAlert>
      <SlAlert variant="warning" ref={createErrorRef}>
        <SlIcon slot="icon" name="exclamation-triangle" />
        <strong>Oh dear!</strong>
        <br />
          There was an error creating your record
      </SlAlert>
      <div>
        <span>Create {{title_case entry_type.name}}</span>
        <form ref={formRef} onSubmit={handleSubmit}>
          {{#uniq_lines}}
            {{#each entry_type.fields}}
              {{#if widget}}
          {{> (concat field_type.type "/" widget "/edit/render") field_name=field_name entry_name=(snake_case ../entry_type.name)}}

              {{/if}}
            {{/each}}
          {{/uniq_lines}}
          <div>
            <SlButton 
              variant="neutral"
              label="Cancel"
              type="button"
              outline
              onClick={onCreateCanceled}
            >Cancel
            </SlButton>
            <SlButton 
              variant="primary"
              label="Save"
              type="submit"
              disabled={!isTodoValid}
            >Submit
            </SlButton>
          </div>
        </form>
      </div>
    </>
  );
};

export default Create{{pascal_case entry_type.name}};