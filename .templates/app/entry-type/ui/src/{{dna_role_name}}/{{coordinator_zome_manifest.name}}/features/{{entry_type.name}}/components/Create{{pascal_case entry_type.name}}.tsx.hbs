import React, { useState, useContext, useRef } from 'react';
import { Record } from '@holochain/client';
import { ClientContext } from '../../../../../clientContext';

import type SlInputElement from '@shoelace-style/shoelace/dist/components/input/input';
import { SlAlert, SlButton, SlIcon } from '@shoelace-style/shoelace/dist/react';
{{#uniq_lines}}
  {{#each entry_type.fields}}
    {{#if widget}}
{{> (concat field_type.type "/" widget "/edit/imports") }};
    {{/if}}
  {{/each}}
{{/uniq_lines}}
{{#each entry_type.fields}}
  {{#if widget}}
{{> (concat field_type.type "/" widget "/edit/wrapper") }}
  {{/if}}
{{/each}}
import { {{pascal_case entry_type.name}}{{#each entry_type.fields}}{{#if (eq field_type.type "Enum")}}, {{field_type.label}}{{/if}}{{/each}} } from '../types';

interface ICreate{{pascal_case entry_type.name}}Props {
  onCreateCanceled?: () => void;
  on{{pascal_case entry_type.name}}Created?: (actionHash: Uint8Array, record: Record) => void;
}

const Create{{pascal_case entry_type.name}} = ({onCreateCanceled, on{{pascal_case entry_type.name}}Created} : ICreate{{pascal_case entry_type.name}}Props) => {
  const client = useContext(ClientContext);

  const formRef = useRef<HTMLFormElement>(null);
  const createSuccessRef = useRef<any>(null);
  const createErrorRef = useRef<any>(null);
  const current{{pascal_case entry_type.name}}: {{pascal_case entry_type.name}} = { {{#each entry_type.fields}}
          {{#if (eq cardinality "single") }}
          {{snake_case field_name}}:{{#if widget}}{{> (concat field_type.type "/" widget "/initial-value") }}{{/if}},
          {{else}}
          {{snake_case field_name}}: {{#if widget}}
            {{#if (eq cardinality "vector")}} [{{> (concat field_type.type "/" widget "/initial-value") }}]{{else}}{{> (concat field_type.type "/" widget "/initial-value") }}{{/if}}{{/if}}{{#if (eq cardinality "vector") }} as Array<{{> (concat field_type.type "/type") }}>{{/if}},
          {{/if}}
    {{/each}}
  };

  const [{{snake_case entry_type.name}}, set{{pascal_case entry_type.name}}] = useState<{{pascal_case entry_type.name}}>(current{{pascal_case entry_type.name}});

  const is{{pascal_case entry_type.name}}Invalid = () => !(true{{#each entry_type.fields}}{{#if widget}}{{#if (eq cardinality "single")}} && {{> (concat field_type.type "/" widget "/is-valid") variable_to_validate=(concat (snake_case ../entry_type.name) "." (camel_case field_name)) }}{{/if}}{{#if (eq cardinality "vector")}} && {{snake_case ../entry_type.name}}.{{snake_case field_name}}.every((e: any) => {{> (concat field_type.type "/" widget "/is-valid") variable_to_validate="e" }}){{/if}}{{/if}}{{/each}});

  const create{{pascal_case entry_type.name}} = async () => {
    try {
      const createRecord: Record = await client!.callZome({
        cap_secret: null,
        role_name: '{{dna_role_name}}',
        zome_name: '{{coordinator_zome_manifest.name}}',
        fn_name: 'create_{{snake_case entry_type.name}}',
        payload: {{snake_case entry_type.name}}
      });
      !!on{{pascal_case entry_type.name}}Created && on{{pascal_case entry_type.name}}Created!(createRecord.signed_action.hashed.hash, createRecord);
      formRef.current?.reset();
      createSuccessRef?.current.toast();
    } catch (e: any) {
      createErrorRef?.current.toast();
    }
  };

  const handleChange = async ({event: {target}, data} : { event: any } & { data?: any } ) => {
    const value = data && !!data?.type ? data : (target as SlInputElement)?.value || target?.checked // disambiguate between enum field types which have a data payload

    // Vector Field Logic:
    const isVectorField : boolean = !!target.name.match(/\[(\d+)\]$/); // disambiguate between single fields and Vec(array) element fields which have naming convention `fieldname[i]`
    const fieldName = `${target.name}`.split(/\[(\d+)\]$/)[0] as keyof typeof {{snake_case entry_type.name}};
    const tempVector : any = isVectorField && {{snake_case entry_type.name}}[fieldName]; // assign vector to a temporary variable for mutation
    if(isVectorField) { 
      const index : number = +target.name.match(/\[(\d+)\]$/)[1];
      tempVector[index] = value;
    }
    //

    set{{pascal_case entry_type.name}}({
      ...{{snake_case entry_type.name}},
      [target.name]: isVectorField ? tempVector : value
    });
  }

  const handleSubmit = async (e: any) => {
    e.preventDefault();

    await create{{pascal_case entry_type.name}}();
  }

  return (
    <>
      <SlAlert variant="success" ref={createSuccessRef}>
        <SlIcon slot="icon" name="check2-circle" />
        <strong>Your new record has been saved</strong>
        <br />
        You can safely return now.
      </SlAlert>
      <SlAlert variant="warning" ref={createErrorRef}>
        <SlIcon slot="icon" name="exclamation-triangle" />
        <strong>Oh dear!</strong>
        <br />
          There was an error creating your record
      </SlAlert>
      <div>
        <span>Create {{title_case entry_type.name}}</span>
        <form ref={formRef} onSubmit={handleSubmit}>
            {{#each entry_type.fields}}
              {{#if widget}}
                  {{#if (not (eq cardinality "vector") )}}
          {{> (concat field_type.type "/" widget "/edit/render") field_name=field_name entry_name=(snake_case ../entry_type.name)}}
                  {{else}}
          {{> Vec/edit/render field_name=field_name field_type=field_type widget=widget entry_name=(snake_case ../entry_type.name) key=@index }}
                  {{/if}}
              {{/if}}
            {{/each}}
          
          <div>
            <SlButton 
              variant="neutral"
              type="button"
              outline
              onClick={onCreateCanceled}
            >Cancel
            </SlButton>
            <SlButton 
              variant="primary"
              type="submit"
              disabled={is{{pascal_case entry_type.name}}Invalid()}
            >Submit
            </SlButton>
          </div>
        </form>
      </div>
    </>
  );
};

export default Create{{pascal_case entry_type.name}};