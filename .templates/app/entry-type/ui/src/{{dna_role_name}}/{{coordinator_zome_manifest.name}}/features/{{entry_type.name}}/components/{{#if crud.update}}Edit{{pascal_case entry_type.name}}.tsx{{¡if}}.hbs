import React, { useState, useContext, useRef } from 'react';
import { Record, EntryHash, ActionHash } from '@holochain/client';
import { ClientContext } from '../../../../../clientContext';
import { decode } from '@msgpack/msgpack';

import type SlInputElement from '@shoelace-style/shoelace/dist/components/input/input';
import { SlAlert, SlButton, SlIcon } from '@shoelace-style/shoelace/dist/react';
{{#uniq_lines}}
  {{#each entry_type.fields}}
    {{#if widget}}
{{> (concat field_type.type "/" widget "/edit/imports") }};
    {{/if}}
  {{/each}}
{{/uniq_lines}}

import { {{pascal_case entry_type.name}}{{#each entry_type.fields}}{{#if (eq field_type.type "Enum")}}, {{field_type.label}}{{/if}}{{/each}} } from '../types';

interface IEdit{{pascal_case entry_type.name}}Props {
  currentRecord: Record;
  original{{pascal_case entry_type.name}}Hash: EntryHash;
  onEditCanceled?: () => void;
  on{{pascal_case entry_type.name}}Updated?: (actionHash: ActionHash) => void;
}

const Edit{{pascal_case entry_type.name}} = ({currentRecord, onEditCanceled, on{{pascal_case entry_type.name}}Updated} : IEdit{{pascal_case entry_type.name}}Props) => {
  const client = useContext(ClientContext);

  const formRef = useRef<HTMLFormElement>(null);
  const updateSuccessRef = useRef<typeof SlAlert>(undefined);
  const updateErrorRef = useRef<typeof SlAlert>(undefined);

  const current{{pascal_case entry_type.name}} = decode((currentRecord.entry as any).Present.entry) as {{pascal_case entry_type.name}};
  const [{{snake_case entry_type.name}}, set{{pascal_case entry_type.name}}] = useState<{{pascal_case entry_type.name}}>(current{{pascal_case entry_type.name}});

  const is{{pascal_case entry_type.name}}Valid = () => {
      return true{{#each entry_type.fields}}{{#if widget}}{{#if (eq cardinality "single")}} && {{> (concat field_type.type "/" widget "/is-valid") variable_to_validate=(concat "{{snake_case entry_type.name}}." (camel_case field_name)) }}{{/if}}{{#if (eq cardinality "vector")}} && {{snake_case entry_type.name}}.{{camel_case field_name}}.every(e => {{> (concat field_type.type "/" widget "/is-valid") variable_to_validate="e" }}){{/if}}{{/if}}{{/each}};
    };

  const update{{pascal_case entry_type.name}} = async () => {
    try {
      const updateRecord: Record = await client!.callZome({
        cap_secret: null,
        role_name: '{{dna_role_name}}',
        zome_name: '{{coordinator_zome_manifest.name}}',
        fn_name: 'update_{{snake_case entry_type.name}}',
        payload: {
{{#if link_from_original_to_each_update}}
          original_{{snake_case entry_type.name}}_hash: original{{pascal_case entry_type.name}}Hash,
{{/if}}
          previous_{{snake_case entry_type.name}}_hash: currentRecord.signed_action.hashed.hash,
          updated_{{snake_case entry_type.name}}: {{camel_case entry_type.name}}
        }
      });
      !!on{{pascal_case entry_type.name}}Updated && on{{pascal_case entry_type.name}}Updated!(updateRecord.signed_action.hashed.hash);
    } catch (e: any) {
      updateErrorRef!.current.show();
      updateErrorRef!.current.toast();
    }
  };

  const handleChange = async (event: any) => {
    const value = (event.target as SlInputElement).value;

    set{{pascal_case entry_type.name}}({
      ...{{snake_case entry_type.name}},
      [event.target.name]: value
    });
  }

  const handleSubmit = async (e: any) => {
    e.preventDefault();

    await updateTodo();
  }

  return (
    <>
      <SlAlert variant="success" ref={updateSuccessRef}>
        <SlIcon slot="icon" name="check2-circle" />
        <strong>Your changes have been saved</strong>
        <br />
        You can safely return now.
      </SlAlert>
      <SlAlert variant="warning" ref={updateErrorRef}>
        <SlIcon slot="icon" name="exclamation-triangle" />
        <strong>Oh dear!</strong>
        <br />
          There was an error updating your record
      </SlAlert>
      <div>
        <span>Edit {{title_case entry_type.name}}</span>
        <form ref={formRef} onSubmit={handleSubmit}>
          {{#uniq_lines}}
            {{#each entry_type.fields}}
              {{#if widget}}
          {{> (concat field_type.type "/" widget "/edit/render") field_name=field_name entry_name=(snake_case ../entry_type.name)}}

              {{/if}}
            {{/each}}
          {{/uniq_lines}}
          <div>
            <SlButton 
              variant="neutral"
              label="Cancel"
              type="button"
              outline
              onClick={onEditCanceled}
            >Cancel
            </SlButton>
            <SlButton 
              variant="primary"
              label="Save"
              type="submit"
              disabled={!isTodoValid}
            >Submit
            </SlButton>
          </div>
        </form>
      </div>
    </>
  );
};

export default Edit{{pascal_case entry_type.name}};