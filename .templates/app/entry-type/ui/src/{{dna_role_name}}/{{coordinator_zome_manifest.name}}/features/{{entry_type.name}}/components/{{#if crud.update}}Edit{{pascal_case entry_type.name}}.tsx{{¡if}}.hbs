import React, { useState, useContext, useRef } from 'react';
import { AppAgentClient, Record, EntryHash, ActionHash } from '@holochain/client';
import { ClientContext } from '../../../../../clientContext';
import { decode } from '@msgpack/msgpack';
import { serialize } from '@shoelace-style/shoelace/dist/utilities/form.js';

import '@material/mwc-button';
import '@material/mwc-snackbar';
{{#uniq_lines}}
  {{#each entry_type.fields}}
    {{#if widget}}
{{> (concat field_type.type "/" widget "/edit/imports") }}
    {{/if}}
  {{/each}}
{{/uniq_lines}}

import { {{pascal_case entry_type.name}}{{#each entry_type.fields}}{{#if (eq field_type.type "Enum")}}, {{field_type.label}}{{/if}}{{/each}} } from '../types';

interface IEditEntryProps {
  currentRecord: Record;
  original{{pascal_case entry_type.name}}Hash: EntryHash;
  onEditCanceled?: () => void;
  onEntryUpdated?: (actionHash: ActionHash) => void;
}

const EditEntry = ({currentRecord, onEditCanceled, onEntryUpdated} : IEditEntryProps) => {
  const client = useContext(ClientContext);
  const formRef = useRef(null);
  const updateErrorRef = useRef(null);

  const current{{pascal_case entry_type.name}} = decode((currentRecord.entry as any).Present.entry) as {{pascal_case entry_type.name}};
  const [{{snake_case entry_type.name}}, set{{pascal_case entry_type.name}}] = useState<{{pascal_case entry_type.name}}>(current{{pascal_case entry_type.name}});

  const is{{pascal_case entry_type.name}}Valid = true;

  const update{{pascal_case entry_type.name}} = async () => {
    try {
      const updateRecord: Record = await client!.callZome({
        cap_secret: null,
        role_name: '{{dna_role_name}}',
        zome_name: '{{coordinator_zome_manifest.name}}',
        fn_name: 'update_{{snake_case entry_type.name}}',
        payload: {
{{#if link_from_original_to_each_update}}
          original_{{snake_case entry_type.name}}_hash: original{{pascal_case entry_type.name}}Hash,
{{/if}}
          previous_{{snake_case entry_type.name}}_hash: currentRecord.signed_action.hashed.hash,
          updated_{{snake_case entry_type.name}}: {{camel_case entry_type.name}}
        }
      });
      onEntryUpdated!(updateRecord.signed_action.hashed.hash);
    } catch (e: any) {
      // On error, show Snackbar
    }
  };

  const handleChange = async (e: any) => {
    const value = e.target.value;

    set{{pascal_case entry_type.name}}({
      ...{{snake_case entry_type.name}},
      [e.target.name]: value
    });
  }

  const handleSubmit = async (e: any) => {
    e.preventDefault();
    const formData = serialize(formRef);
    alert(formData);
  }

  return (
    <>
      <mwc-snackbar ref={updateErrorRef}></mwc-snackbar>

      <div>
        <span>Edit {{title_case entry_type.name}}</span>
        <form ref={formRef} onSubmit={handleSubmit}>
          {{#uniq_lines}}
            {{#each entry_type.fields}}
              {{#if widget}}
          {{> (concat field_type.type "/" widget "/edit/render") field_name=field_name entry_name=(snake_case ../entry_type.name)}}

              {{/if}}
            {{/each}}
          {{/uniq_lines}}
          <div>
            <mwc-button
              outlined
              label="Cancel"
              onClick={onEditCanceled}
            ></mwc-button>
            <mwc-button
              raised
              label="Save"
              type="submit"
              disabled={!is{{pascal_case entry_type.name}}Valid}
            ></mwc-button>
          </div>
        </form>
      </div>
    </>
  );
};

export default EditEntry;