import React, { useState, useContext, useRef } from 'react';
import { Record, encodeHashToBase64, ActionHashB64 } from '@holochain/client';
import { ClientContext } from '../../../../../clientContext';
import { decode } from '@msgpack/msgpack';

import type SlInputElement from '@shoelace-style/shoelace/dist/components/input/input';
import { SlAlert, SlButton, SlIcon } from '@shoelace-style/shoelace/dist/react';
{{#uniq_lines}}
  {{#each entry_type.fields}}
    {{#if widget}}
{{> (concat field_type.type "/" widget "/edit/imports") }};
    {{/if}}
  {{/each}}
{{/uniq_lines}}

import { {{pascal_case entry_type.name}}{{#each entry_type.fields}}{{#if (eq field_type.type "Enum")}}, {{field_type.label}}{{/if}}{{/each}} } from '../types';

interface IEdit{{pascal_case entry_type.name}}Props {
  currentRecord: Record;
  original{{pascal_case entry_type.name}}Hash: ActionHashB64;
  onEditCanceled?: () => void;
  on{{pascal_case entry_type.name}}Updated?: (actionHash: ActionHashB64) => void;
}
{{#each entry_type.fields}}
  {{#if widget}}
{{> (concat field_type.type "/" widget "/edit/wrapper") }}
  {{/if}}
{{/each}}

const Edit{{pascal_case entry_type.name}} = ({currentRecord, onEditCanceled, original{{pascal_case entry_type.name}}Hash, on{{pascal_case entry_type.name}}Updated} : IEdit{{pascal_case entry_type.name}}Props) => {
  const client = useContext(ClientContext);

  const formRef = useRef<HTMLFormElement>(null);
  const updateSuccessRef = useRef<any>(null);
  const updateErrorRef = useRef<any>(null);

  const current{{pascal_case entry_type.name}} = decode((currentRecord.entry as any).Present.entry) as {{pascal_case entry_type.name}};
  const [{{snake_case entry_type.name}}, set{{pascal_case entry_type.name}}] = useState<{{pascal_case entry_type.name}}>(current{{pascal_case entry_type.name}});

  const is{{pascal_case entry_type.name}}Invalid = () => !(true{{#each entry_type.fields}}{{#if widget}}{{#if (eq cardinality "single")}} && {{> (concat field_type.type "/" widget "/is-valid") variable_to_validate=(concat (snake_case ../entry_type.name) "." (camel_case field_name)) }}{{/if}}{{#if (eq cardinality "vector")}} && {{snake_case ../entry_type.name}}.{{snake_case field_name}}.every((e: any) => {{> (concat field_type.type "/" widget "/is-valid") variable_to_validate="e" }}){{/if}}{{/if}}{{/each}});

  const update{{pascal_case entry_type.name}} = async () => {
    try {
      const updateRecord: Record = await client!.callZome({
        cap_secret: null,
        role_name: '{{dna_role_name}}',
        zome_name: '{{coordinator_zome_manifest.name}}',
        fn_name: 'update_{{snake_case entry_type.name}}',
        payload: {
{{#if link_from_original_to_each_update}}
          original_{{snake_case entry_type.name}}_hash: original{{pascal_case entry_type.name}}Hash,
{{/if}}
          previous_{{snake_case entry_type.name}}_hash: currentRecord.signed_action.hashed.hash,
          updated_{{snake_case entry_type.name}}: {{camel_case entry_type.name}}
        }
      });
      !!on{{pascal_case entry_type.name}}Updated && on{{pascal_case entry_type.name}}Updated!(encodeHashToBase64(updateRecord.signed_action.hashed.hash) as ActionHashB64);
      updateSuccessRef?.current.toast();
    } catch (e: any) {
      updateErrorRef?.current.toast();
    }
  };
    
  const handleChange = async ({event: {target}, data} : { event: any } & { data?: any } ) => {
    const value = data && !!data?.type ? data : (target as SlInputElement)?.value || target?.checked // disambiguate between enum field types which have a data payload

    // Vector Field Logic:
    const isVectorField : boolean = !!target.name.match(/\[(\d+)\]$/); // disambiguate between single fields and Vec(array) element fields which have naming convention `fieldname[i]`
    const fieldName = `${target.name}`.split(/\[(\d+)\]$/)[0] as keyof typeof {{snake_case entry_type.name}};
    const tempVector : any = isVectorField && {{snake_case entry_type.name}}[fieldName]; // assign vector to a temporary variable for mutation
    if(isVectorField) { 
      const index : number = +target.name.match(/\[(\d+)\]$/)[1];
      tempVector[index] = value;
    }
    //

    const isDateField : boolean = target.__data && !target.__data.invalid;

    set{{pascal_case entry_type.name}}({
      ...{{snake_case entry_type.name}},
      [target.name]: isVectorField ? tempVector : (isDateField ? +(new Date(value)) : value)
    });
  }

  const handleSubmit = async (e: any) => {
    e.preventDefault();

    await update{{pascal_case entry_type.name}}();
  }

  return (
    <>
      <SlAlert variant="success" ref={updateSuccessRef}>
        <SlIcon slot="icon" name="check2-circle" />
        <strong>Operation was successful</strong>
        <br />
          Your changes have been saved
      </SlAlert>
      <SlAlert variant="warning" ref={updateErrorRef}>
        <SlIcon slot="icon" name="exclamation-triangle" />
        <strong>Oh dear!</strong>
        <br />
          There was an error updating your record
      </SlAlert>
      <div>
        <span>Edit {{title_case entry_type.name}}</span>
        <form ref={formRef} onSubmit={handleSubmit}>
            {{#each entry_type.fields}}
              {{#if widget}}
                  {{#if (not (eq cardinality "vector") )}}
          {{> (concat field_type.type "/" widget "/edit/render") field_name=field_name entry_name=(snake_case ../entry_type.name)}}
                  {{else}}
          {{> Vec/edit/render field_name=field_name field_type=field_type widget=widget entry_name=(snake_case ../entry_type.name) key=@index }}
                  {{/if}}
              {{/if}}
            {{/each}}

          <div className="form-submit">
            <SlButton 
              variant="neutral"
              type="button"
              outline
              onClick={onEditCanceled}
            >Cancel
            </SlButton>
            <SlButton 
              variant="success"
              type="submit"
              disabled={is{{pascal_case entry_type.name}}Inalid()}
            >Save
            </SlButton>
          </div>
        </form>
      </div>
    </>
  );
};

export default Edit{{pascal_case entry_type.name}};