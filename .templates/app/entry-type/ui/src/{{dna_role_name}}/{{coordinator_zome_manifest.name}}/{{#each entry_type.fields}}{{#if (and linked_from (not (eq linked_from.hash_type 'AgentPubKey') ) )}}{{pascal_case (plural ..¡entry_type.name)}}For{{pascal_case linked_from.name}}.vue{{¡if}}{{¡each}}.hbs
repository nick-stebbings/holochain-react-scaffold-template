<template>
  <div v-if="loading" style="display: flex; flex: 1; align-items: center; justify-content: center">
    <mwc-circular-progress indeterminate></mwc-circular-progress>
  </div>
  
  <div v-else style="display: flex; flex-direction: column">
    <span v-if="error">Error fetching the {{lower_case (plural ../entry_type.name)}}: {{{{raw}}}} {{error.data.data}}.{{{{/raw}}}}</span>
    <div v-else-if="hashes && hashes.length > 0" style="margin-bottom: 8px">
      <{{pascal_case ../entry_type.name}}Detail 
        v-for="hash in hashes" 
        :{{kebab_case ../entry_type.name}}-hash="hash" 
      >
      </{{pascal_case ../entry_type.name}}Detail>
    </div>
    <span v-else>No {{lower_case (plural ../entry_type.name)}} found for this {{lower_case linked_from.name}}.</span>
  </div>

</template>

<script lang="ts">
import { defineComponent, inject, ComputedRef } from 'vue';
import { decode } from '@msgpack/msgpack';
import { AppAgentClient, Record, AgentPubKey, EntryHash, ActionHash } from '@holochain/client';
import '@material/mwc-circular-progress';
import {{pascal_case ../entry_type.name}}Detail from './{{pascal_case ../entry_type.name}}Detail.vue';

export default defineComponent({
  components: {
    {{pascal_case ../entry_type.name}}Detail
  },
  props: {
    {{camel_case linked_from.singular_arg}}Hash: {
      type: Object,
      required: true
    }
  },
  data(): { hashes: Array<{{#if ../entry_type.reference_entry_hash}}EntryHash{{else}}ActionHash{{/if}}> | undefined; loading: boolean; error: any } {
    return {
      hashes: undefined,
      loading: true,
      error: undefined
    }
  },
  async mounted() {
    if (this.{{camel_case linked_from.singular_arg}}Hash === undefined) {
      throw new Error(`The {{camel_case linked_from.singular_arg}}Hash input is required for the {{pascal_case (plural ../entry_type.name)}}For{{pascal_case linked_from.name}} element`);
    }

    try {
      this.hashes = await this.client.callZome({
        cap_secret: null,
        role_name: '{{dna_role_name}}',
        zome_name: '{{../coordinator_zome_manifest.name}}',
        fn_name: 'get_{{snake_case (plural ../entry_type.name)}}_for_{{snake_case linked_from.name}}',
        payload: this.{{camel_case linked_from.singular_arg}}Hash,
      });
    } catch (e) {
      this.error = e;
    }
    this.loading = false;
  },
  setup() {
    const client = (inject('client') as ComputedRef<AppAgentClient>).value;
    return {
      client,
    };
  },
})
</script>
