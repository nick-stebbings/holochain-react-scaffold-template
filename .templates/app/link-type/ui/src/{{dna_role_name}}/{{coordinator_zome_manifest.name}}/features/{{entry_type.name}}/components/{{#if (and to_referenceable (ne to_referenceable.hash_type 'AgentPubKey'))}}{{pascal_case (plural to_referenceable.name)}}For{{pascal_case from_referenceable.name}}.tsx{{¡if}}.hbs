import React, { useState, useContext, useRef, useEffect } from 'react';
import { Record, ActionHashB64, encodeHashToBase64 } from '@holochain/client';
import { ClientContext } from '../../../../../clientContext';

import { SlAlert, SlIcon, SlSpinner } from '@shoelace-style/shoelace/dist/react';

import {{pascal_case to_referenceable.name}}Details from './{{pascal_case to_referenceable.name}}Detail';
import { {{pascal_case to_referenceable.name}}{{#each entry_type.fields}}{{#if (eq field_type.type "Enum")}}, {{field_type.label}}{{/if}}{{/each}} } from '../types';
import { {{pascal_case to_referenceable.name}}sSignal } from '../../../types';

interface I{{pascal_case (plural to_referenceable.name)}}For{{pascal_case from_referenceable.name}}Props {
  {{camel_case from_referenceable.name}}Hash?: ActionHashB64;
}

const {{pascal_case (plural to_referenceable.name)}}For{{pascal_case from_referenceable.name}} = ({ {{camel_case from_referenceable.name}}Hash } : I{{pascal_case (plural to_referenceable.name)}}For{{pascal_case from_referenceable.name}}Props) => {
  const client = useContext(ClientContext);
  const [loading, setLoading] = useState(true);
  const [{{camel_case from_referenceable.name}}Hash, set{{title_case from_referenceable.name}}Hash] = useState<ActionHashB64>();
  const [hashes, setHashes] = useState<Array<ActionHashB64>>();

  const fetchErrorRef = useRef<any>(null);

  useEffect(() => {
    fetch{{pascal_case (plural to_referenceable.name)}}For{{pascal_case from_referenceable.name}}();

    client.on('signal', (signal : any) => {
      if (signal.zome_name !== '{{coordinator_zome_manifest.name}}') return; 
      const payload = signal.payload as {{pascal_case coordinator_zome_manifest.name}}Signal;
      if (payload.type !== 'LinkCreated') return;
      if (payload.link_type !== '{{pascal_case link_type_name}}') return;

      if (hashes) hashes.push(payload.action.hashed.content.target_address);
      });
  } ,[])

  const fetch{{pascal_case (plural to_referenceable.name)}}For{{pascal_case from_referenceable.name}} = async () => {
    setLoading(true);

    try {
      const maybeRecords: Array<Record> = await client.callZome({
        cap_secret: null,
        role_name: '{{dna_role_name}}',
        zome_name: '{{coordinator_zome_manifest.name}}',
        fn_name: 'get_{{snake_case (plural to_referenceable.name)}}_for_{{snake_case from_referenceable.name}}',
        payload: {{camel_case from_referenceable.singular_arg}},
      });

      setHashes(maybeRecords.map(r => encodeHashToBase64({{#if (eq to_referenceable.hash_type "ActionHash")}}r.signed_action.hashed.hash{{else}}(r.signed_action.hashed.content as NewEntryAction).entry_hash{{/if}})));
    } catch (e: any) {
      fetchErrorRef?.current.toast();
    }
    setLoading(false);
  };

  return loading ? <SlSpinner></SlSpinner> :
    !{{camel_case from_referenceable.name}}Hash ? <p>The {{camel_case from_referenceable.singular_arg}} input is required for the {{pascal_case (plural to_referenceable.name)}}For{{pascal_case from_referenceable.name}} element</p> :
    !hashes || hashes && hashes.length == 0 ? <p>No records found</p> : (
    <>
      <SlAlert variant="warning" ref={fetchErrorRef}>
        <SlIcon slot="icon" name="exclamation-triangle" />
        <strong>Oh dear!</strong>
        <br />
          There was an error fetching your records
      </SlAlert>
      {
        hashes.map((ah: ActionHashB64, i: number) => 
          <{{pascal_case to_referenceable.name}}Details {{snake_case to_referenceable.name}}Hash={ah} on{{pascal_case to_referenceable.name}}Deleted={ fetch{{pascal_case (plural to_referenceable.name)}}For{{pascal_case from_referenceable.name}} } key={i} />
        )
      }
    </>
  );
};

export default {{pascal_case (plural to_referenceable.name)}}For{{pascal_case from_referenceable.name}};