import React, { useState, useEffect } from 'react'
import { AppAgentClient, AppAgentWebsocket } from '@holochain/client';
import { ClientContext } from './clientContext';

import './style.css'

import { SlSpinner } from '@shoelace-style/shoelace/dist/react';

const instructions = [`import { AgentPubKeyB64, AppAgentWebsocket, encodeHashToBase64 } from '@holochain/client';
import CreateTodo from './todos/todos/features/todo/components/CreateTodo';
import TodoDetails from './todos/todos/features/todo/components/TodoDetails';`,
 `const [hash, setHash] = useState<AgentPubKeyB64>();`,
 `<CreateTodo onCreateCanceled={() => {}} onTodoCreated={(ah: any) => {setHash(encodeHashToBase64(ah))}}></CreateTodo>            
{ hash && <TodoDetails todoHash={hash} ></TodoDetails>}`]

function App() {
    const [loading, setLoading] = useState(true);
    const [count, setCount] = useState<number>(0);
    const [client, setClient] = useState<AppAgentWebsocket>();

    useEffect(() => {
        async function initClient() {
            // We pass '' as url because it will dynamically be replaced in launcher environments
            setClient(await AppAgentWebsocket.connect('', '{{app_name}}'));

            setLoading(false)
        }
        initClient();
    }, []);

    return loading
        ? (<SlSpinner></SlSpinner>)
        : (
            <ClientContext.Provider value={client}>
                <div className="App">
                    <h1>Holochain + React</h1>
                    <div className="card">
                        <button onClick={() => setCount((count) => count + 1)}>
                            count is {count}
                        </button>
                    </div>
                    <div id="content">
                        <h2>EDIT ME! Add the components of your app here.</h2>
                        <span>Look in the <code>ui/src/DNA/ZOME/features/ENTRY_TYPE</code> folders for UI elements that are generated with <br />
                            <code>hc scaffold entry-type</code>, <code>hc scaffold collection</code> and
                            <code>hc scaffold link-type</code> <br /> and
                            add them here as appropriate.</span> <br /> <br />
                        <span>For example, if you have scaffolded a "todos" dna, a "todos" zome, a "todo_item" entry type, and a
                            collection
                            called "all_todos", you might want to add an element here to create and list your todo items, with the
                            generated elements</span>
                        <span>So, to use those elements here:</span>
                        <ol>
                            <li>Import the element and needed dependencies with: <br />
                                <pre>
                                    <code>
                                        {instructions[0]}
                                    </code>
                                </pre>
                            </li> <br /> <br />
                            <li>Add some state management (at the top of your App component code) so that your Details/Edit component will re-render on creating your Todo<br />
                                <pre>
                                    <code>
                                        {instructions[1]}
                                    </code>
                                </pre>
                            </li>
                            <li>Replace this "EDIT ME!" section with <br />
                                <pre>
                                    <code>
                                        {instructions[2]}
                                    </code>
                                </pre>
                            </li>
                        </ol>
                    </div>
                </div>
            </ClientContext.Provider>
        )
}

export default App