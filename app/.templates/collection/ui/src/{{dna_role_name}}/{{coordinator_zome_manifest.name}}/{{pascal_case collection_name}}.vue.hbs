<template>
  <div v-if="loading" style="display: flex; flex: 1; align-items: center; justify-content: center">
    <mwc-circular-progress indeterminate></mwc-circular-progress>
  </div>

  <div v-else style="display: flex; flex-direction: column">
    <span v-if="error">Error fetching the {{lower_case (plural referenceable.name)}}: {{{{raw}}}} {{error.data.data}}.{{{{/raw}}}}</span>
    <div v-else-if="hashes && hashes.length > 0" style="margin-bottom: 8px">
      <{{pascal_case referenceable.name}}Detail 
        v-for="hash in hashes" 
        :{{kebab_case referenceable.name}}-hash="hash"
        @{{kebab_case referenceable.name}}-deleted="fetch{{pascal_case referenceable.name}}()"
      >
      </{{pascal_case referenceable.name}}Detail>
    </div>
    <span v-else>No {{lower_case (plural referenceable.name)}} found{{#if (eq collection_type.type "ByAuthor")}} for this author{{/if}}.</span>
  </div>

</template>

<script lang="ts">
import { defineComponent, inject, toRaw, ComputedRef } from 'vue';
import { decode } from '@msgpack/msgpack';
import { AppAgentClient, NewEntryAction, Record, AgentPubKey, EntryHash, ActionHash } from '@holochain/client';
import '@material/mwc-circular-progress';
import {{pascal_case referenceable.name}}Detail from './{{pascal_case referenceable.name}}Detail.vue';
import { {{pascal_case coordinator_zome_manifest.name}}Signal } from './types';

export default defineComponent({
  components: {
    {{pascal_case referenceable.name}}Detail
  },
{{#if (eq collection_type.type "ByAuthor")}}
  props: {
    author: {
      type: Object,
      required: true
    }
  },
{{/if}}
  data(): { hashes: Array<{{referenceable.hash_type}}> | undefined; loading: boolean; error: any } {
    return {
      hashes: undefined,
      loading: true,
      error: undefined
    }
  },
  async mounted() {
  {{#if (eq collection_type.type "ByAuthor")}}
    if (this.author === undefined) {
      throw new Error(`The author property is required for the {{pascal_case collection_name}} element`);
    }

  {{/if}}
    await this.fetch{{pascal_case referenceable.name}}();
    toRaw(this.client).on('signal', signal => {
      if (signal.zome_name !== '{{coordinator_zome_manifest.name}}') return; 
      const payload = signal.payload as {{pascal_case coordinator_zome_manifest.name}}Signal;
      if (payload.type !== 'EntryCreated') return;
      if (payload.app_entry.type !== '{{pascal_case referenceable.name}}') return;
{{#if (eq collection_type.type "ByAuthor")}}
      if (this.author.toString() !== this.client.myPubKey.toString()) return;
{{/if}}
      if (this.hashes) this.hashes.push({{#if (eq referenceable.hash_type "ActionHash")}}payload.action.hashed.hash{{else}}(payload.action.hashed.content as NewEntryAction).entry_hash{{/if}});
    });
  },
  methods: {
    async fetch{{pascal_case referenceable.name}}() {
      try {
        const records: Array<Record> = await this.client.callZome({
          cap_secret: null,
          role_name: '{{dna_role_name}}',
          zome_name: '{{snake_case coordinator_zome_manifest.name}}',
          fn_name: 'get_{{snake_case collection_name}}',
          payload: {{#if (eq collection_type.type "ByAuthor")}}this.author{{else}}null{{/if}},
        });
        this.hashes = records.map(r => {{#if (eq referenceable.hash_type "ActionHash")}}r.signed_action.hashed.hash{{else}}(r.signed_action.hashed.content as NewEntryAction).entry_hash{{/if}});
      } catch (e) {
        this.error = e;
      }
      this.loading = false;
    }
  },
  setup() {
    const client = (inject('client') as ComputedRef<AppAgentClient>).value;
    return {
      client,
    };
  },
})
</script>
